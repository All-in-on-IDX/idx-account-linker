{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["connect","a","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","cacheProvider","network","disableInjectedProvider","provider","web3","Web3","eth","getAccounts","addresses","threeID","ThreeIdConnect","EthereumAuthProvider","ceramic","Ceramic","setDIDProvider","getDidProvider","idx","IDX","console","info","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oZAUe,aACb,IAAMA,EAAO,uCAAG,0CAAAC,EAAA,6DACRC,EAAkB,CACtBC,cAAe,CACbC,QAASC,IACTC,QAAS,CAEPC,SAAU,sCAIVC,EAAY,IAAIC,IAAU,CAC9BC,eAAe,EACfC,QAAS,OACTT,kBACAU,yBAAyB,IAdb,SAgBSJ,EAAUR,UAhBnB,cAgBRa,EAhBQ,OAiBRC,EAAO,IAAIC,IAAKF,GAjBR,SAmBUC,EAAKE,IAAIC,cAnBnB,cAmBRC,EAnBQ,OAoBRC,EAAU,IAAIC,iBApBN,UAqBRD,EAAQnB,QACZ,IAAIqB,uBAAqBR,EAAUK,EAAU,KAtBjC,eAyBRI,EAAU,IAAIC,IAAQ,qCAzBd,UA0BRD,EAAQE,eAAeL,EAAQM,kBA1BvB,QA2BRC,EAAM,IAAIC,IAAI,CAAEL,YAEtBM,QAAQC,KAAKH,GA7BC,4CAAH,qDAkCb,OAFAI,qBAAU,kBAAM9B,MAAW,IAGzB,8BClCW+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.d8478ffd.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport Web3Modal from 'web3modal'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { useEffect } from 'react'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { IDX } from '@ceramicstudio/idx'\nimport { ThreeIdConnect, EthereumAuthProvider } from '3id-connect'\n\nimport './App.css'\n\nexport default () => {\n  const connect = async () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          // Δυς's dev key; not to be relied upon\n          infuraId: '24eb2385c3514f3d98191ad5e4c903e7' // required\n        }\n      }\n    }\n    const web3Modal = new Web3Modal({\n      cacheProvider: false, // optional\n      network: 'xdai', // optional\n      providerOptions, // required\n      disableInjectedProvider: false, // optional. For MetaMask / Brave / Opera.\n    })\n    const provider = await web3Modal.connect()\n    const web3 = new Web3(provider)\n\n    const addresses = await web3.eth.getAccounts()\n    const threeID = new ThreeIdConnect()\n    await threeID.connect(\n      new EthereumAuthProvider(provider, addresses[0])\n    )\n\n    const ceramic = new Ceramic('https://ceramic-clay.3boxlabs.com')\n    await ceramic.setDIDProvider(threeID.getDidProvider())\n    const idx = new IDX({ ceramic })\n\n    console.info(idx)\n  }\n\n  useEffect(() => connect(), [])\n\n  return (\n    <></>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}