{"version":3,"sources":["Increment.jsx","reportWebVitals.js","index.js","App.js","CreateCredential.jsx","ConnectWallet.jsx","CollectUsername.jsx","DIDToGist.jsx","Home.jsx","Reducer.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","store","verifier","idxKey","deB64","str","de","Buffer","from","toString","JSON","parse","err","jwtStr","obj","signatures","protected","payload","signature","join","connect","state","did","username","ceramic","useState","done","setDone","error","setError","create","a","url","fetch","method","body","stringify","res","json","datum","challengeCode","data","Error","createJWS","jws","status","message","att","attestation","parts","split","map","acct","vc","credentialSubject","account","protocol","host","id","claim","attestations","createDocument","deterministic","content","akaSchema","akaType","createDefinition","name","description","schema","commitId","toUrl","akaDef","idxDefs","idx","IDX","aliases","get","accounts","aka","push","console","merge","info","useEffect","address","setCeramic","web3","setWeb3","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","cacheProvider","getInjectedProvider","provider","Web3","eth","getAccounts","addresses","setAddress","threeID","ThreeIdConnect","EthereumAuthProvider","Ceramic","setDIDProvider","getDidProvider","setDID","title","slice","Delete","onClick","currentProvider","disconnect","setName","setUsername","href","onSubmit","evt","preventDefault","type","onChange","target","value","comps","CreateCredential","pageSlice","createSlice","initialState","step","reducers","nextPage","lastPage","action","configureStore","reducer","next","dispatch","actions","addr","user"],"mappings":"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","file":"static/js/main.bebf540e.chunk.js","sourcesContent":["import { connect } from 'react-redux'\nimport React from 'react'\nimport { next } from './Reducer'\n\nexport default () => (\n  <button onClick={next}>+</button>\n)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import Web3 from 'web3'\nimport Web3Modal from 'web3modal'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { useEffect } from 'react'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { IDX } from '@ceramicstudio/idx'\nimport { ThreeIdConnect, EthereumAuthProvider } from '3id-connect'\nimport { createDefinition, publishSchema } from '@ceramicstudio/idx-tools'\nimport { Provider } from 'react-redux'\nimport collectionSchema from './akaSchema.json'\nimport recordSchema from './verificationSchema.json'\nimport Home from './Home'\nimport Increment from './Increment'\nimport { store } from './Reducer'\n\nconst username = 'dysbulic'\n//const host = 'oiekhuylog.execute-api.us-west-2.amazonaws.com'\nconst host = 'localhost:3000'\n// Δυς's dev key; not to be relied upon\nconst infuraId = '24eb2385c3514f3d98191ad5e4c903e7'\nconst ceramicSvr = 'https://ceramic-clay.3boxlabs.com'\n//const ceramicSvr = 'http://localhost:7007'\nconst idxKey = 'aka'\n\n// Reverse base 64 encoding to an object if possible\nconst deB64 = (str) => {\n  const de = Buffer.from(str, 'base64').toString()\n  try {\n    return JSON.parse(de)\n  } catch(err) {\n    return de\n  } \n}\n\n// Convert the object representation of a JWT to a string\nconst jwtStr = (obj) => (\n  [\n    obj.signatures[0].protected,\n    obj.payload,\n    obj.signatures[0].signature,\n  ]\n  .join('.')\n)\n\nexport default () => {\n  const connect = async () => {\n    console.info('Starting Connect:', ceramicSvr)\n\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          infuraId // required\n        }\n      }\n    }\n    const web3Modal = new Web3Modal({\n      cacheProvider: true, // optional\n      // network: 'xdai', // optional\n      providerOptions, // required\n    })\n    const provider = await web3Modal.connect()\n    const web3 = new Web3(provider)\n\n    const addresses = await web3.eth.getAccounts()\n    const threeID = new ThreeIdConnect()\n    await threeID.connect(\n      new EthereumAuthProvider(provider, addresses[0])\n    )\n\n    const ceramic = new Ceramic(ceramicSvr)\n    await ceramic.setDIDProvider(threeID.getDidProvider())\n\n    console.info({ did: ceramic.did.id })\n\n    let url = `http://${host}/api/v0/request-github`\n    let res = await fetch(url, {\n      method: 'post',\n      body: JSON.stringify(\n        { did: ceramic.did.id, username }\n      ),\n    })\n\n    const challengeCode = (await res.json())?.data?.challengeCode\n\n    console.info({ challengeCode })\n\n    const jws = jwtStr(\n      await ceramic.did.createJWS({ challengeCode })\n    )\n\n    console.info('Valid:', await ceramic.did.verifyJWS(jws))\n\n    url = `http://${host}/api/v0/confirm-github`\n    res = await fetch(url, {\n      method: 'post',\n      body: JSON.stringify({ jws }),\n    })\n\n    const datum = await res.json()\n    if(datum.status === 'error') throw datum.message\n    const att = datum?.data?.attestation\n    if(!att) throw 'missing data'\n    const parts = att?.split('.').map(deB64)\n    const acct = parts[1].vc.credentialSubject.account\n\n    // const recordType = await ceramic.createDocument('tile', {\n    //   deterministic: true,\n    //   content: recordSchema,\n    // })\n    // const schemaID = recordType.id\n\n    // const record = await ceramic.loadDocument(schemaID)\n\n    // console.info({ sch: schemaID.toString(), r: record.content })\n\n    const account = {\n      protocol: 'https',\n      host: 'github.com',\n      id: acct.username,\n      claim: acct.url,\n      attestations: [{ 'did-jwt-vc': att }]\n    }\n\n    const collectionType = await ceramic.createDocument('tile', {\n      deterministic: true,\n      content: collectionSchema,\n    })\n\n    console.info({ id: collectionType.id.toUrl(), cid: collectionType.commitId.toUrl() })\n\n    const akaDef = await createDefinition(ceramic, {\n      name: 'AsKnownAs',\n      description: 'Account links to an IDX DID', // optional\n      schema: collectionType.commitId.toUrl(),\n    })\n\n    console.info({ akaDef })\n\n    const idxDefs = {\n      [idxKey]: [akaDef.commitId.toUrl()],\n    }\n\n    const idx = new IDX({ ceramic, aliases: idxDefs })\n\n    const auths = (await idx.get(idxKey)) || []\n    console.info(auths)\n    auths.push(account)\n    await idx.merge(idxKey, auths)\n\n    console.info(idx.get(idxKey))\n  }\n\n  //useEffect(() => connect(), [])\n\n  return (\n    <Provider store={store}>\n      <Home/>\n    </Provider>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { connect } from \"react-redux\"\nimport { ThreeIdConnect, EthereumAuthProvider } from '3id-connect'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { Box } from '@chakra-ui/react'\nimport { createDefinition, publishSchema } from '@ceramicstudio/idx-tools'\nimport akaSchema from './akaSchema.json'\nimport { IDX } from '@ceramicstudio/idx'\n\nconst verifier = 'http://localhost:3000'\nconst idxKey = 'aka'\n\n// Reverse base 64 encoding to an object if possible\nconst deB64 = (str) => {\n  const de = Buffer.from(str, 'base64').toString()\n  try {\n    return JSON.parse(de)\n  } catch(err) {\n    return de\n  } \n}\n\n// Convert the object representation of a JWT to a string\nconst jwtStr = (obj) => (\n  [\n    obj.signatures[0].protected,\n    obj.payload,\n    obj.signatures[0].signature,\n  ]\n  .join('.')\n)\n\nconst CreateCredential = ({ did, username, ceramic }) => {\n  const [done, setDone] = useState(false)\n  const [error, setError] = useState()\n  const create = async () => {\n    try {\n      let url = `${verifier}/api/v0/request-github`\n      let res = await fetch(url, {\n        method: 'post',\n        body: JSON.stringify(\n          { did, username }\n        ),\n      })\n      let datum = await res.json()\n      const challengeCode = datum?.data?.challengeCode\n\n      if(!challengeCode) throw new Error(\"Couldn't generate challenge\")\n      \n      const jws = jwtStr(\n        await ceramic.did.createJWS({ challengeCode })\n      )\n\n      //console.info('Valid:', await ceramic.did.verifyJWS(jws))\n\n      url = `${verifier}/api/v0/confirm-github`\n      res = await fetch(url, {\n        method: 'post',\n        body: JSON.stringify({ jws }),\n      })\n\n      datum = await res.json()\n      if(datum.status === 'error') throw new Error(datum.message)\n      if(datum.status >= 300) throw new Error(datum.body)\n      const att = datum?.data?.attestation\n      if(!att) throw new Error('missing attestation')\n      const parts = att?.split('.').map(deB64)\n      const acct = parts[1].vc.credentialSubject.account\n\n      const account = {\n        protocol: 'https',\n        host: 'github.com',\n        id: acct.username,\n        claim: acct.url,\n        attestations: [{ 'did-jwt-vc': att }]\n      }\n\n      const akaType = await ceramic.createDocument('tile', {\n        deterministic: true,\n        content: akaSchema,\n      })\n\n      const akaDef = await createDefinition(ceramic, {\n        name: 'AsKnownAs',\n        description: 'Account links to an IDX DID', // optional\n        schema: akaType.commitId.toUrl(),\n      })\n\n      const idxDefs = {\n        [idxKey]: [akaDef.commitId.toUrl()],\n      }\n\n      const idx = new IDX({ ceramic, aliases: idxDefs })\n\n      const aka = (await idx.get(idxKey)) || { accounts: [] }\n      if(!aka.accounts) throw new Error(`malformed ${idxKey} entry`)\n      aka.accounts.push(account)\n      console.info((await idx.merge(idxKey, aka)).toString())\n      setDone(true)\n    } catch(err) {\n      console.error(err)\n      setError(err.message)\n    }\n  }\n\n  useEffect(() => create(), [])\n\n  if(error) {\n    return (\n      <Box>\n        <h1>Error: {error}</h1>\n      </Box>\n    )\n  }\n\n  if(!done) {\n    return (\n      <Box>\n        <h1>Verifying gist for {username}.</h1>\n      </Box>\n    )\n  }\n\n  return (\n    <Box><h1>Verified</h1></Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    did: state.did,\n    username: state.username,\n  })\n)(CreateCredential)","import { useState } from 'react'\nimport Web3 from 'web3'\nimport Web3Modal, { connectors } from 'web3modal'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { ThreeIdConnect, EthereumAuthProvider } from '3id-connect'\nimport { setAddress, setDID } from './Reducer'\nimport { connect } from 'react-redux'\nimport { Box } from '@chakra-ui/react'\nimport { DeleteIcon } from '@chakra-ui/icons'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { getInjectedProvider } from 'web3modal'\n\n// Δυς's dev key; not to be relied upon\nconst infuraId = '24eb2385c3514f3d98191ad5e4c903e7'\nconst ceramicSvr = 'https://ceramic-clay.3boxlabs.com'\n\nconst ConnectWallet = ({ address, setCeramic }) => {\n  const [web3, setWeb3] = useState()\n\n  const providerOptions = {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId // required\n      }\n    }\n  }\n  const web3Modal = new Web3Modal({\n    cacheProvider: true, // optional\n    // network: 'xdai', // optional\n    providerOptions, // required\n  })\n\n  console.info(getInjectedProvider())\n\n  const connect = async () => {\n    const provider = await web3Modal.connect()\n    const web3 = new Web3(provider)\n    setWeb3(web3)\n\n    const addresses = await web3.eth.getAccounts()\n    const address = addresses[0]\n    setAddress(address)\n\n    const threeID = new ThreeIdConnect()\n    await threeID.connect(\n      new EthereumAuthProvider(provider, address)\n    )\n\n    const ceramic = new Ceramic(ceramicSvr)\n    await ceramic.setDIDProvider(threeID.getDidProvider())\n    setCeramic(ceramic)\n\n    setDID(ceramic.did.id)\n  }\n\n  if(address) {\n    return (\n      <h1>\n        Using:\n        <span> </span>\n        <span title={address}>\n          {address.slice(0, 10)}…{address.slice(-5)}\n        </span>\n        <DeleteIcon onClick={async () => {\n          setAddress()\n          web3?.currentProvider?.disconnect && await web3.currentProvider.disconnect()\n        }}/>\n      </h1>\n    )\n  }\n\n  return (\n    <Box>\n      <button onClick={connect}>Connect Your Wallet</button>\n    </Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    address: state.address,\n  }),\n)(ConnectWallet)","import { useState } from 'react'\nimport { connect } from \"react-redux\"\nimport { Box } from \"@chakra-ui/react\"\nimport { DeleteIcon } from '@chakra-ui/icons'\nimport { setUsername } from './Reducer'\n\nconst CollectUsername = ({ username }) => {\n  const [name, setName] = useState(username)\n\n  if(username) {\n    return (\n      <Box>\n        <h1>\n          Checking: {username}\n          <DeleteIcon onClick={() => setUsername()}/>\n        </h1>\n      </Box>\n    )\n  }\n\n  const onSubmit = (evt) => {\n    console.info('SUB', username)\n    evt.preventDefault()\n    setUsername(name)\n  }\n\n  return (\n    <Box>\n      <h1>¿What's your <a href='//github,com'>Github</a> username?</h1>\n      <form onSubmit={onSubmit}>\n        <input\n          type='text'\n          onChange={evt => setName(evt.target.value)}\n        />\n      </form>\n    </Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    username: state.username,\n  })\n)(CollectUsername)","import { useState, useEffect } from 'react'\nimport { connect } from \"react-redux\"\nimport { ThreeIdConnect, EthereumAuthProvider } from '3id-connect'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { Box } from '@chakra-ui/react'\n\nconst DIDToGist = ({ did, username }) => {\n  return (\n    <Box>\n      <h1>\n        Copy your DID to a\n        <span> </span>\n        <a\n          target='_blank'\n          href={`//gist.github.com/${username}`}\n        >gist</a>.\n      </h1>\n      <h1>{did}</h1>\n    </Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    did: state.did,\n    username: state.username,\n  })\n)(DIDToGist)","import { connect } from 'react-redux'\nimport { useState } from 'react'\nimport ConnectWallet from './ConnectWallet'\nimport CollectUsername from './CollectUsername'\nimport DIDToGist from './DIDToGist'\nimport CreateCredential from './CreateCredential'\n\nconst Home = ({ address, username, did }) => {\n  const [ceramic, setCeramic] = useState()\n  const comps = []\n  comps.push(<ConnectWallet {...{ setCeramic }}/>)\n  if(did) {\n    comps.push(<CollectUsername/>)\n    if(username) {\n      comps.push(<DIDToGist/>)\n      comps.push(<CreateCredential {...{ ceramic }}/>)\n    }\n  }\n  return comps\n}\n\nexport default connect(state => {\n  const { address, username, did } = state\n  return { address, username, did }\n})(Home)","import { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst initial = {\n  step: 1,\n  address: null,\n  username: null,\n}\n\nconst pageSlice = createSlice({\n  name: 'page',\n  initialState: initial,\n  reducers: {\n    nextPage: state => ({ ...state, step: state.step + 1 }),\n    lastPage: state => ({ ...state, step: state.step + 1 }),\n    setAddress: (state, action) => (\n      { ...state, address: action.payload }\n    ),\n    setUsername: (state, action) => (\n      { ...state, username: action.payload }\n    ),\n    setDID: (state, action) => (\n      { ...state, did: action.payload }\n    ),\n  },\n})\n\nexport const store = configureStore({\n  reducer: pageSlice.reducer\n})\n\nexport const next = () => (\n  store.dispatch(pageSlice.actions.nextPage())\n)\nexport const previous = () => (\n  store.dispatch(pageSlice.actions.previousPage())\n)\nexport const setAddress = (addr) => (\n  store.dispatch(pageSlice.actions.setAddress(addr))\n)\nexport const setUsername = (user) => (\n  store.dispatch(pageSlice.actions.setUsername(user))\n)\nexport const setDID = (did) => (\n  store.dispatch(pageSlice.actions.setDID(did))\n)"],"sourceRoot":""}