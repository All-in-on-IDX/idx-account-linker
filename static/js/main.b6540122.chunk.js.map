{"version":3,"sources":["Reducer.js","ConnectWallet.jsx","CollectUsername.jsx","DIDToGist.jsx","Home.jsx","App.js","reportWebVitals.js","index.js","CreateCredential.jsx"],"names":["pageSlice","createSlice","name","initialState","step","address","username","reducers","nextPage","state","lastPage","setAddress","action","payload","setUsername","setDID","did","store","configureStore","reducer","addr","dispatch","actions","user","connect","setCeramic","useState","web3","setWeb3","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","web3Modal","Web3Modal","cacheProvider","a","provider","Web3","eth","getAccounts","addresses","threeID","ThreeIdConnect","EthereumAuthProvider","ceramic","Ceramic","setDIDProvider","getDidProvider","id","enableIfInjected","cachedProvider","useEffect","title","slice","Delete","onClick","currentProvider","disconnect","setName","href","onSubmit","evt","console","info","preventDefault","onChange","target","value","onCopy","useClipboard","Copy","comps","push","CreateCredential","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","verifier","idxKey","deB64","str","de","Buffer","from","toString","JSON","parse","err","jwtStr","obj","signatures","protected","signature","join","done","setDone","error","setError","create","url","stringify","fetch","method","body","res","json","datum","challengeCode","data","Error","createJWS","jws","status","message","att","attestation","parts","split","map","acct","vc","credentialSubject","account","protocol","host","claim","attestations","createDocument","deterministic","content","akaSchema","akaType","toUrl","commit","commitId","createDefinition","description","schema","akaDef","idxDefs","idx","IDX","aliases","get","accounts","aka","merge"],"mappings":"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","file":"static/js/main.b6540122.chunk.js","sourcesContent":["import { createSlice, configureStore } from '@reduxjs/toolkit'\n\nconst initial = {\n  step: 1,\n  address: null,\n  username: null,\n}\n\nconst pageSlice = createSlice({\n  name: 'page',\n  initialState: initial,\n  reducers: {\n    nextPage: state => ({ ...state, step: state.step + 1 }),\n    lastPage: state => ({ ...state, step: state.step + 1 }),\n    setAddress: (state, action) => (\n      { ...state, address: action.payload }\n    ),\n    setUsername: (state, action) => (\n      { ...state, username: action.payload }\n    ),\n    setDID: (state, action) => (\n      { ...state, did: action.payload }\n    ),\n  },\n})\n\nexport const store = configureStore({\n  reducer: pageSlice.reducer\n})\n\nexport const next = () => (\n  store.dispatch(pageSlice.actions.nextPage())\n)\nexport const previous = () => (\n  store.dispatch(pageSlice.actions.previousPage())\n)\nexport const setAddress = (addr) => (\n  store.dispatch(pageSlice.actions.setAddress(addr))\n)\nexport const setUsername = (user) => (\n  store.dispatch(pageSlice.actions.setUsername(user))\n)\nexport const setDID = (did) => (\n  store.dispatch(pageSlice.actions.setDID(did))\n)","import { useState } from 'react'\nimport Web3 from 'web3'\nimport Web3Modal, { connectors } from 'web3modal'\nimport WalletConnectProvider from '@walletconnect/web3-provider'\nimport { ThreeIdConnect, EthereumAuthProvider } from '3id-connect'\nimport { setAddress, setDID } from './Reducer'\nimport { connect } from 'react-redux'\nimport { Box, Button, Spinner, Stack, Text } from '@chakra-ui/react'\nimport { DeleteIcon } from '@chakra-ui/icons'\nimport Ceramic from '@ceramicnetwork/http-client'\nimport { getInjectedProvider } from 'web3modal'\nimport { useEffect } from 'react'\n\n// Δυς's dev key; not to be relied upon\nconst infuraId = '24eb2385c3514f3d98191ad5e4c903e7'\nconst ceramicSvr = 'https://ceramic-clay.3boxlabs.com'\n\nconst ConnectWallet = ({ address, setCeramic, did }) => {\n  const [web3, setWeb3] = useState()\n\n  const providerOptions = {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        infuraId // required\n      }\n    }\n  }\n  const web3Modal = new Web3Modal({\n    cacheProvider: true, // optional\n    // network: 'xdai', // optional\n    providerOptions, // required\n  })\n\n  //console.info(getInjectedProvider())\n\n  const connect = async () => {\n    const provider = await web3Modal.connect()\n    const web3 = new Web3(provider)\n    setWeb3(web3)\n\n    const addresses = await web3.eth.getAccounts()\n    const address = addresses[0]\n    setAddress(address)\n\n    const threeID = new ThreeIdConnect()\n    await threeID.connect(\n      new EthereumAuthProvider(provider, address)\n    )\n\n    const ceramic = new Ceramic(ceramicSvr)\n    await ceramic.setDIDProvider(threeID.getDidProvider())\n    setCeramic(ceramic)\n\n    setDID(ceramic.did.id)\n  }\n\n  const enableIfInjected = async () => {\n    if(!did && web3Modal.cachedProvider === 'injected') {\n      await connect()\n    }\n  }\n\n  useEffect(() => enableIfInjected(), [])\n\n  if(address) {\n    return (\n      <Stack>\n        <Text>\n          Using:\n          <span> </span>\n          <span title={address}>\n            {address.slice(0, 10)}…{address.slice(-5)}\n          </span>\n          <span> </span>\n          <DeleteIcon onClick={async () => {\n            setAddress()\n            web3?.currentProvider?.disconnect && await web3.currentProvider.disconnect()\n          }}/>\n        </Text>\n        {!did && <Box><Spinner/></Box>}\n      </Stack>\n    )\n  }\n\n  return (\n    <Box>\n      <Button onClick={connect}>Connect Your Wallet</Button>\n    </Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    address: state.address,\n    did: state.did,\n  }),\n)(ConnectWallet)","import { useState } from 'react'\nimport { connect } from \"react-redux\"\nimport { Box, Text, Input } from \"@chakra-ui/react\"\nimport { DeleteIcon } from '@chakra-ui/icons'\nimport { setUsername } from './Reducer'\n\nconst CollectUsername = ({ username }) => {\n  const [name, setName] = useState(username)\n\n  if(username) {\n    return (\n      <Box>\n        <Text>\n          Checking: {username}\n          <span> </span>\n          <DeleteIcon onClick={() => setUsername()}/>\n        </Text>\n      </Box>\n    )\n  }\n\n  const onSubmit = (evt) => {\n    console.info('SUB', username)\n    evt.preventDefault()\n    setUsername(name)\n  }\n\n  return (\n    <Box>\n      <Text>¿What's your <a href='//github,com'>Github</a> username?</Text>\n      <form onSubmit={onSubmit}>\n        <Input\n          onChange={evt => setName(evt.target.value)}\n        />\n      </form>\n    </Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    username: state.username,\n  })\n)(CollectUsername)","import { connect } from \"react-redux\"\nimport { Box, useClipboard, Text, Stack } from '@chakra-ui/react'\nimport { CopyIcon } from '@chakra-ui/icons'\n\nconst DIDToGist = ({ did, username }) => {\n  const { onCopy } = useClipboard(did)\n  return (\n    <Box><Stack>\n      <Text>\n        Copy your DID to a\n        <span> </span>\n        <a\n          target='_blank'\n          href={`//gist.github.com/${username}`}\n        >gist</a>.\n      </Text>\n      <Text>\n        <span title={did}>\n          {did.slice(0, 10)}…{did.slice(-5)}\n        </span>\n        <span> </span>\n        <CopyIcon title=\"copy\" onClick={onCopy}/>\n      </Text>\n      </Stack></Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    did: state.did,\n    username: state.username,\n  })\n)(DIDToGist)","import { connect } from 'react-redux'\nimport { useState } from 'react'\nimport ConnectWallet from './ConnectWallet'\nimport CollectUsername from './CollectUsername'\nimport DIDToGist from './DIDToGist'\nimport CreateCredential from './CreateCredential'\nimport { Center, Stack } from '@chakra-ui/react'\n\nconst Home = ({ address, username, did }) => {\n  const [ceramic, setCeramic] = useState()\n  const comps = []\n  comps.push(<ConnectWallet {...{ setCeramic }}/>)\n  if(did) {\n    comps.push(<CollectUsername/>)\n    if(username) {\n      comps.push(<DIDToGist/>)\n      comps.push(<CreateCredential {...{ ceramic }}/>)\n    }\n  }\n  return <Center><Stack>{comps}</Stack></Center>\n}\n\nexport default connect(state => {\n  const { address, username, did } = state\n  return { address, username, did }\n})(Home)","import { Provider } from 'react-redux'\nimport Home from './Home'\nimport { store } from './Reducer'\n\nexport default () => (\n  <Provider store={store}>\n    <Home/>\n  </Provider>\n)\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useState, useEffect } from 'react'\nimport { connect } from \"react-redux\"\nimport { Box, Spinner, Text } from '@chakra-ui/react'\nimport { createDefinition, publishSchema } from '@ceramicstudio/idx-tools'\nimport akaSchema from './akaSchema.json'\nimport { IDX } from '@ceramicstudio/idx'\n\n//const verifier = 'http://localhost:3000'\nconst verifier = 'https://oiekhuylog.execute-api.us-west-2.amazonaws.com/develop'\nconst idxKey = 'aka'\n\n// Reverse base 64 encoding to an object if possible\nconst deB64 = (str) => {\n  const de = Buffer.from(str, 'base64').toString()\n  try {\n    return JSON.parse(de)\n  } catch(err) {\n    return de\n  } \n}\n\n// Convert the object representation of a JWT to a string\nconst jwtStr = (obj) => (\n  [\n    obj.signatures[0].protected,\n    obj.payload,\n    obj.signatures[0].signature,\n  ]\n  .join('.')\n)\n\nconst CreateCredential = ({ did, username, ceramic }) => {\n  const [done, setDone] = useState(false)\n  const [error, setError] = useState()\n  const create = async () => {\n    try {\n      let url = `${verifier}/api/v0/request-github`\n      console.info(JSON.stringify(\n        { did, username }\n      ))\n      let res = await fetch(url, {\n        method: 'post',\n        body: JSON.stringify(\n          { did, username }\n        ),\n      })\n      let datum = await res.json()\n      const challengeCode = datum?.data?.challengeCode\n\n      if(!challengeCode) throw new Error(\"Couldn't generate challenge\")\n      \n      const jws = jwtStr(\n        await ceramic.did.createJWS({ challengeCode })\n      )\n\n      //console.info('Valid:', await ceramic.did.verifyJWS(jws))\n\n      url = `${verifier}/api/v0/confirm-github`\n      res = await fetch(url, {\n        method: 'post',\n        body: JSON.stringify({ jws }),\n      })\n\n      datum = await res.json()\n      if(datum.status === 'error') throw new Error(datum.message)\n      if(datum.status >= 300) throw new Error(datum.body)\n      const att = datum?.data?.attestation\n      if(!att) throw new Error('missing attestation')\n      const parts = att?.split('.').map(deB64)\n      const acct = parts[1].vc.credentialSubject.account\n\n      const account = {\n        protocol: 'https',\n        host: 'github.com',\n        id: acct.username,\n        claim: acct.url,\n        attestations: [{ 'did-jwt-vc': att }]\n      }\n\n      const akaType = await ceramic.createDocument('tile', {\n        deterministic: true,\n        content: akaSchema,\n      })\n\n      console.info('akaType', { id: akaType.id.toUrl(), commit: akaType.commitId.toUrl() })\n\n      const akaDef = await createDefinition(ceramic, {\n        name: 'AsKnownAs',\n        description: 'Account links to an IDX DID', // optional\n        schema: akaType.commitId.toUrl(),\n      })\n\n      console.info('akaDef', { id: akaDef.id.toUrl(), commit: akaDef.commitId.toUrl() })\n\n      const idxDefs = {\n        [idxKey]: [akaDef.commitId.toUrl()],\n      }\n\n      const idx = new IDX({ ceramic, aliases: idxDefs })\n\n      const aka = (await idx.get(idxKey)) || { accounts: [] }\n\n      console.info('existing', { ...aka })\n\n      if(!aka.accounts) throw new Error(`malformed ${idxKey} entry`)\n      aka.accounts.push(account)\n\n      console.info('new', { ...aka })\n\n      console.info('repo', (await idx.merge(idxKey, aka)).toUrl())\n      setDone(true)\n    } catch(err) {\n      console.error(err)\n      setError(err.message)\n    }\n  }\n\n  useEffect(() => create(), [])\n\n  if(error) {\n    return (\n      <Box>\n        <Text>Error: {error}</Text>\n      </Box>\n    )\n  }\n\n  if(!done) {\n    return (\n      <Box>\n        <Text>Verifying gist for {username}. <Spinner/></Text>\n      </Box>\n    )\n  }\n\n  return (\n    <Box><Text>Verified</Text></Box>\n  )\n}\n\nexport default connect(\n  (state) => ({\n    did: state.did,\n    username: state.username,\n  })\n)(CreateCredential)"],"sourceRoot":""}